{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","veriosURL","cnpjs","join","EssayForm","props","state","value","handleChange","bind","event","target","replace","match","this","setState","className","onSubmit","handleSubmit","onChange","cols","rows","placeholder","href","React","Component","Intro","Footer","App","id","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uLAAAA,EAAOC,QAAU,IAA0B,kC,4ICMrCC,G,YAAY,SAACC,GAAD,MAAW,uDAAyDA,EAAMC,KAAK,OAI3FC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GACPL,MAAO,IAGT,EAAKM,aAAe,EAAKA,aAAaC,KAAlB,gBAPH,E,0EAUNC,GACX,IAAMH,EAAQG,EAAMC,OAAOJ,MACrBL,EAAqBK,EAfGK,QAAQ,KAAM,IAAIA,QAAQ,MAAO,IAAIA,QAAQ,MAAO,IAAIC,MAAM,YAevD,GACrCC,KAAKC,SAAS,CAACR,QAAOL,Y,+BAItB,OACE,yBAAKc,UAAU,QACb,0BAAMC,SAAUH,KAAKI,cACjB,8BAAUX,MAAOO,KAAKR,MAAMC,MAAOY,SAAUL,KAAKN,aAAcY,KAAM,GAAIC,KAAM,GAAIC,YAAY,oFAEpG,yBAAKN,UAAU,WACb,4CACA,uBAAGL,OAAO,SAASY,MA/BLrB,EA+B0BY,KAAKR,MAAMJ,MA/B3B,gDAAkDA,EAAMC,KAAK,OA+BrF,gBACA,uBAAGQ,OAAO,SAASY,KAAMtB,EAAUa,KAAKR,MAAMJ,QAA9C,YAhCa,IAACA,M,GAMAsB,IAAMC,WAiCxBC,EAAQ,kBACZ,yBAAKV,UAAU,SACb,+DACA,6BACE,sGAAkE,uBAAGL,OAAO,SAASY,KAAK,+FAAxB,+BAAlE,OAGAI,EAAS,kBACb,yBAAKX,UAAU,UACf,wCAAa,uBAAGL,OAAO,SAASY,KAAK,gCAAxB,oBAKAK,EAFH,kBAAM,yBAAKC,GAAG,OAAM,kBAAC,EAAD,MAAS,kBAAC,EAAD,MAAa,kBAAC,EAAD,QC3ClCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCZNqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e0f1556d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst maisRetornoURL = (cnpjs) => \"https://maisretorno.com/comparacao/otimo/cdi/\" + cnpjs.join(',');\n\nconst veriosURL = (cnpjs) => \"https://verios.com.br/apps/comparacao/log/otimo/cdi/\" + cnpjs.join('/');\n\nconst extractCNPJs = (txt) => txt.replace(/-/g, '').replace(/\\./g, '').replace(/\\//g, '').match(/\\d{14}/g);\n\nclass EssayForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      cnpjs: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const value = event.target.value;\n    const cnpjs = extractCNPJs(value) || [];\n    this.setState({value, cnpjs});\n  }\n\n  render() {\n    return (\n      <div className=\"form\">\n        <form onSubmit={this.handleSubmit}>\n            <textarea value={this.state.value} onChange={this.handleChange} cols={40} rows={10} placeholder=\"Cole aqui um texto que inclua os CNPJs dos fundos de investimento de interesse\" />\n        </form>\n        <div className=\"preview\">\n          <h1>Comparadores</h1>\n          <a target=\"_blank\" href={maisRetornoURL(this.state.cnpjs)}>Mais retorno</a>\n          <a target=\"_blank\" href={veriosURL(this.state.cnpjs)}>Verios</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Intro = () => \n  <div className=\"intro\">\n    <h1>Utilitários para finanças</h1>\n    <br/>\n      <p>Se você achou esta página interessante, dê uma olhada na minha <a target=\"_blank\" href=\"https://medium.com/@den.isidoro/using-grafana-for-personal-financial-management-ac0e4d0cb43\">plataforma para finanças</a>.</p>\n  </div>;\n\nconst Footer = () => \n  <div className=\"footer\">\n  <p>Feito por <a target=\"_blank\" href=\"https://denisidoro.github.io\">Denis Isidoro</a></p>\n  </div>;\n\nconst App = () => <div id=\"app\"><Intro /><EssayForm /><Footer /></div>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}